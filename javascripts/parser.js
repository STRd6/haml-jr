// Generated by CoffeeScript 1.6.3
(function() {
  var create, grammar, o, operators, parser, _ref;

  _ref = require("./grammar_dsl"), o = _ref.node, create = _ref.create;

  grammar = {
    root: [
      o("lines", function() {
        return yy.nodePath[0].children;
      })
    ],
    lines: [o("lines line"), o("line")],
    indentation: [
      o("", function() {
        return 0;
      }), o("indentationLevel")
    ],
    indentationLevel: [
      o("indentationLevel INDENT", function() {
        return $1 + 1;
      }), o("INDENT", function() {
        return 1;
      })
    ],
    line: [
      o("DOCTYPE end", function() {
        return "doctype";
      }), o("indentation lineMain end", function() {
        return yy.append($lineMain, $indentation);
      }), o("end", function() {
        if ($end.newline) {
          return yy.newline();
        }
      })
    ],
    lineMain: [
      o("tag rest", function() {
        return yy.extend($tag, $rest);
      }), o("tag", function() {
        return $tag;
      }), o("rest", function() {
        return $rest;
      }), o("COMMENT", function() {
        return {
          comment: $1
        };
      }), o("FILTER", function() {
        return {
          filter: $1
        };
      }), o("FILTER_LINE", function() {
        return {
          filterLine: $1
        };
      })
    ],
    end: [
      o("NEWLINE", function() {
        return {
          newline: true
        };
      }), o("EOF")
    ],
    tag: [
      o("name tagComponents", function() {
        $tagComponents.tag = $name;
        return $tagComponents;
      }), o("name attributes", function() {
        return {
          tag: $name,
          attributes: $attributes
        };
      }), o("name", function() {
        return {
          tag: $name
        };
      }), o("tagComponents", function() {
        return yy.extend($tagComponents, {
          tag: "div"
        });
      })
    ],
    tagComponents: [
      o("idComponent classComponents attributes", function() {
        return {
          id: $idComponent,
          classes: $classComponents,
          attributes: $attributes
        };
      }), o("idComponent attributes", function() {
        return {
          id: $idComponent,
          attributes: $attributes
        };
      }), o("classComponents attributes", function() {
        return {
          classes: $classComponents,
          attributes: $attributes
        };
      }), o("idComponent classComponents", function() {
        return {
          id: $idComponent,
          classes: $classComponents
        };
      }), o("idComponent", function() {
        return {
          id: $idComponent
        };
      }), o("classComponents", function() {
        return {
          classes: $classComponents
        };
      })
    ],
    idComponent: [o("ID")],
    classComponents: [
      o("classComponents CLASS", function() {
        return $1.concat($2);
      }), o("CLASS", function() {
        return [$1];
      })
    ],
    attributes: [
      o("LEFT_PARENTHESIS attributePairs RIGHT_PARENTHESIS", function() {
        return $2;
      }), o("LEFT_BRACE attributePairs RIGHT_BRACE", function() {
        return $2;
      })
    ],
    attributePairs: [
      o("attributePairs SEPARATOR attributePair", function() {
        return $attributePairs.concat($attributePair);
      }), o("attributePair", function() {
        return [$attributePair];
      })
    ],
    attributePair: [
      o("ATTRIBUTE EQUAL ATTRIBUTE_VALUE", function() {
        return {
          name: $1,
          value: $3
        };
      })
    ],
    name: [o("TAG")],
    rest: [
      o("EQUAL CODE", function() {
        return {
          bufferedCode: $CODE
        };
      }), o("HYPHEN CODE", function() {
        return {
          unbufferedCode: $CODE
        };
      }), o("text", function() {
        return {
          text: $text + "\n"
        };
      })
    ],
    text: [
      o("beginText TEXT", function() {
        return $2;
      }), o("TEXT")
    ],
    beginText: [
      o("WHITESPACE", function() {
        return yy.lexer.begin('text');
      })
    ]
  };

  operators = [];

  parser = create({
    grammar: grammar,
    operators: operators,
    startSymbol: "root"
  });

  exports.parser = parser;

}).call(this);
